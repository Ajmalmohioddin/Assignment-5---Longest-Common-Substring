#include <iostream>
#include <string>
#include <algorithm>
#include <vector>

std::string longestCommonSubstring(const std::string& s1, const std::string& s2) {
    int n = s1.length();
    std::vector<std::vector<int>> dp(2, std::vector<int>(n + 1, 0));
    int length = 0;
    int end = 0; // End index of the longest common substring in s1

    for (int i = 1; i <= n; ++i) {
        for (int j = 1; j <= n; ++j) {
            if (s1[i - 1] == s2[j - 1]) {
                dp[i % 2][j] = dp[(i - 1) % 2][j - 1] + 1;
                if (dp[i % 2][j] > length) {
                    length = dp[i % 2][j];
                    end = i - 1;
                }
            } else {
                dp[i % 2][j] = 0;
            }
        }
    }

    // Output the 2D grid
    for (int i = 0; i < 2; ++i) {
        for (int j = 0; j <= n; ++j) {
            std::cout << dp[i][j] << " ";
        }
        std::cout << std::endl;
    }

    return s1.substr(end - length + 1, length);
}

int main() {
    std::string s1, s2;
    std::cout << "Enter first string: ";
    std::cin >> s1;
    std::cout << "Enter second string: ";
    std::cin >> s2;

    std::string result = longestCommonSubstring(s1, s2);
    std::cout << "Longest common substring: " << result << std::endl;

    return 0;
}
